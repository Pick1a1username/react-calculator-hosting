{"version":3,"sources":["actions/index.js","reducers/numberDisplayed.js","reducers/index.js","components/TextAreaDisplay.js","containers/DisplayContainer.js","components/NumberPad.js","containers/NumberPadContainer.js","App.js","index.js"],"names":["calculate","operator","type","Operators","defaultState","leftValue","rightValue","currentOperator","nextValue","noOperatorPassed","numberDisplayed","state","action","calculated","value","parseInt","combineReducers","TextAreaDisplay","className","rows","cols","DisplayContainer","connect","NumberPad","props","onClick","e","typeValue","addition","substraction","multiplication","division","c","ac","equal","NumberPadContainer","dispatch","App","store","createStore","calculatorApp","composeWithDevTools","render","document","getElementById"],"mappings":"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","file":"static/js/main.11d521dc.chunk.js","sourcesContent":["export const typeValue = value => ({\n  type: 'TYPE_VALUE',\n  value\n})\n\nexport const calculate = operator => ({\n  type: 'CALCULATE',\n  operator\n})\n\nexport const ac = () => ({\n  type: 'AC'\n})\n\nexport const c = () => ({\n  type: 'C'\n})\n\nexport const Operators = {\n  ADDITION: 'ADDITION',\n  SUBSTRACTION: 'SUBSTRACTION',\n  MULTIPLICATION: 'MULTIPLICATION',\n  DIVISION: 'DIVISION',\n  EQUAL: 'EQUAL'\n}","import { Operators } from '../actions'\n\nconst defaultState = {\n  leftValue: 0,\n  rightValue: 0,\n  currentOperator: Operators.EQUAL,\n  nextValue: true,\n  noOperatorPassed: true\n}\n\nconst numberDisplayed = ( state = defaultState, action ) => {\n  let calculated = 0\n  switch (action.type) {\n    case 'TYPE_VALUE':\n      if (state.nextValue) return { ...state, rightValue: action.value, nextValue: false }\n      return { ...state, rightValue: parseInt(`${state.rightValue}${action.value}`) }\n    case 'CALCULATE':\n      switch (action.operator) {\n        case Operators.ADDITION:\n          calculated = state.leftValue + state.rightValue;\n          return {\n            leftValue: calculated,\n            currentOperator: Operators.ADDITION,\n            rightValue: calculated,\n            nextValue: true,\n            noOperatorPassed: false\n          }\n        case Operators.SUBSTRACTION:\n          calculated = state.leftValue - state.rightValue;\n          return {\n            leftValue: calculated,\n            currentOperator: Operators.SUBSTRACTION,\n            rightValue: calculated,\n            nextValue: true,\n            noOperatorPassed: false\n          }\n        case Operators.MULTIPLICATION:\n          if (state.noOperatorPassed) return {\n            leftValue: state.rightValue,\n            currentOperator: Operators.MULTIPLICATION,\n            rightValue: state.rightValue,\n            nextValue: true,\n            noOperatorPassed: false\n          }\n          calculated = state.leftValue * state.rightValue;\n          return {\n            leftValue: calculated,\n            currentOperator: Operators.MULTIPLICATION,\n            rightValue: calculated,\n            nextValue: true,\n            noOperatorPassed: false\n          }\n        case Operators.DIVISION:\n          if (state.noOperatorPassed) return {\n            leftValue: state.rightValue,\n            currentOperator: Operators.DIVISION,\n            rightValue: state.rightValue,\n            nextValue: true,\n            noOperatorPassed: false\n          }\n          calculated = state.leftValue / state.rightValue;\n          return {\n            leftValue: calculated,\n            currentOperator: Operators.DIVISION,\n            rightValue: calculated,\n            nextValue: true,\n            noOperatorPassed: false\n          }\n        case Operators.EQUAL:\n          if (state.currentOperator === Operators.ADDITION) {\n            calculated = state.leftValue + state.rightValue;\n            return {\n              leftValue: calculated,\n              currentOperator: Operators.EQUAL,\n              rightValue: calculated,\n              nextValue: true\n            }\n          }\n          if (state.currentOperator === Operators.SUBSTRACTION) {\n            calculated = state.leftValue - state.rightValue;\n            return {\n              leftValue: calculated,\n              currentOperator: Operators.EQUAL,\n              rightValue: calculated,\n              nextValue: true\n            }\n          }\n          if (state.currentOperator === Operators.MULTIPLICATION) {\n            calculated = state.leftValue * state.rightValue;\n            return {\n              leftValue: calculated,\n              currentOperator: Operators.EQUAL,\n              rightValue: calculated,\n              nextValue: true\n            }\n          }\n          if (state.currentOperator === Operators.DIVISION) {\n            calculated = state.leftValue / state.rightValue;\n            return {\n              leftValue: calculated,\n              currentOperator: Operators.EQUAL,\n              rightValue: calculated,\n              nextValue: true\n            }\n          }\n          return state;\n        default:\n          return state\n      }\n    case 'C':\n      return { ...state, rightValue: 0 }\n    case 'AC':\n      return defaultState\n    default:\n      return state\n  }\n}\n\nexport default numberDisplayed","import { combineReducers } from 'redux'\nimport numberDisplayed from './numberDisplayed'\n\nexport default combineReducers({\n  numberDisplayed,\n})","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './TextAreaDisplay.css'\n\n// https://stackoverflow.com/questions/33245017/react-modifying-textarea-values\nconst TextAreaDisplay = ({ value }) => (\n  <textarea className=\"display\" rows=\"1\" cols=\"20\" value={value}/>\n)\n\nTextAreaDisplay.propTypes = {\n  value: PropTypes.number.isRequired,\n}\n\nexport default TextAreaDisplay","import { connect } from 'react-redux'\n// import SimpleDisplay from '../components/SimpleDisplay'\nimport TextAreaDisplay from '../components/TextAreaDisplay'\n\nconst mapStateToProps = state => {\n  return {\n    value: state.numberDisplayed.rightValue\n  }\n}\n\nconst mapDispatchToProps = () => {\n  return {}\n}\n\n\nconst DisplayContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TextAreaDisplay)\n\nexport default DisplayContainer","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './NumberPad.css'\n\nconst NumberPad = (props) => (\n    <div>\n        <button onClick={e => props.typeValue(1)}>1</button>\n        <button onClick={e => props.typeValue(2)}>2</button>\n        <button onClick={e => props.typeValue(3)}>3</button>\n        <button onClick={e => props.addition()}>+</button><br />\n        <button onClick={e => props.typeValue(4)}>4</button>\n        <button onClick={e => props.typeValue(5)}>5</button>\n        <button onClick={e => props.typeValue(6)}>6</button>\n        <button onClick={e => props.substraction()}>-</button><br />\n        <button onClick={e => props.typeValue(7)}>7</button>\n        <button onClick={e => props.typeValue(8)}>8</button>\n        <button onClick={e => props.typeValue(9)}>9</button>\n        <button onClick={e => props.multiplication()}>*</button><br />\n        <button onClick={e => props.typeValue(0)}>0</button>\n        <button onClick={e => props.typeValue(0)}>0</button>\n        <button onClick={e => props.typeValue(0)}>0</button>\n        <button onClick={e => props.division()}>/</button><br />\n        <button onClick={e => props.c()}>C</button>\n        <button onClick={e => props.ac()}>AC</button>\n        <button onClick={e => props.equal()}>=</button>\n    </div>\n)\n\nNumberPad.propTypes = {\n  typeValue: PropTypes.func.isRequired,  \n}\n\nexport default NumberPad","import { connect } from 'react-redux'\nimport { typeValue, calculate, ac, c, Operators } from '../actions'\nimport NumberPad from '../components/NumberPad'\n\nconst mapStateToProps = () => {\n  return {}\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    typeValue: value => {\n      dispatch(typeValue(value))\n    },\n    addition: () => {\n      dispatch(calculate(Operators.ADDITION))\n    },\n    substraction: () => {\n      dispatch(calculate(Operators.SUBSTRACTION))\n    },\n    multiplication: () => {\n      dispatch(calculate(Operators.MULTIPLICATION))\n    },\n    division: () => {\n      dispatch(calculate(Operators.DIVISION))\n    },\n    equal: () => {\n      dispatch(calculate(Operators.EQUAL))\n    },\n    ac: () => {\n      dispatch(ac())\n    },\n    c: () => {\n      dispatch(c())\n    }\n  }\n}\n\nconst NumberPadContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(NumberPad)\n\nexport default NumberPadContainer","import React from 'react';\nimport DisplayContainer from './containers/DisplayContainer'\nimport NumberPadContainer from './containers/NumberPadContainer'\n\nconst App = () => (\n  <div>\n    <DisplayContainer value={0} />\n    <NumberPadContainer />\n  </div>\n)\nexport default App","import React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport calculatorApp from './reducers'\nimport App from './App'\n\n// const store = createStore(calculatorApp)\nconst store = createStore(calculatorApp, composeWithDevTools());\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}